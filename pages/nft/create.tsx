/* eslint-disable @next/next/no-img-element */

import type { NextPage } from 'next';
import { useState, ChangeEvent } from 'react';
import { BaseLayout } from '../../components';
import Link from 'next/link';
import { NftMetaData, PinataRes } from '@_types/nft';
import axios from 'axios';
import { useWeb3 } from 'components/providers/web3';
import { ethers } from 'ethers';
import { toast } from 'react-toastify'; //notification style
import { useRouter } from 'next/router';

import { ExclamationCircleIcon } from '@heroicons/react/24/outline';
import { useNetwork } from 'components/hooks/web3';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { LoadNft3dObject } from '@ui/threejs/utils';

const ALLOWED_FIELDS = ['name', 'description', 'image'];

const NftCreate: NextPage = () => {
  const router = useRouter();
  const { network } = useNetwork();
  const { ethereum, contract } = useWeb3();
  const [nftURI, setNftURI] = useState(''); //create NFT URI
  const [hasURI, setHasURI] = useState(false);
  const [price, setPrice] = useState('');

  const [nftMetaData, setnftMetaData] = useState<NftMetaData>({
    //default data:
    name: '',
    description: '',
    image: '',
  });

  //below function should be used every time data is sent to server.
  const getSignedData = async () => {
    const messageToSign = await axios.get('/api/verify');
    const accounts = (await ethereum?.request({
      method: 'eth_requestAccounts',
    })) as string[];
    const account = accounts[0]; //account who signs the message.

    const signedData = await ethereum?.request({
      method: 'personal_sign',
      params: [
        JSON.stringify(messageToSign.data), //convert to string so user can sign.
        account,
        messageToSign.data.id, //password which is randomly generated by uuid
      ],
    });

    return { signedData, account };
  };

  // const handleImage = async (evt: ChangeEvent<HTMLInputElement>) => {
  //   if (!evt.target.files || evt.target.files.length === 0) {
  //     //if we don't have a file
  //     console.error('Select a file');
  //     return;
  //   }

  //   //todo: figure out how to parse and load glb file!!!!!
  //   const file = evt.target.files[0];
  //   const buffer = await file.arrayBuffer();
  //   const loader = new GLTFLoader();
  //   const modelData = await loader.parseAsync(buffer, '');
  //   const bytes = new Uint8Array(modelData);

  //   try {
  //     const { signedData, account } = await getSignedData();
  //     const promiseImgRes = axios.post('/api/verify-image', {
  //       address: account,
  //       signature: signedData,
  //       glb: bytes, //of the image
  //       contentType: file.type, //extension of the image
  //       fileName: file.name.replace(/\.[^/.]+$/, ''), //remove the extension portiont
  //     });

  //     //loading notification:
  //     const res = await toast.promise(promiseImgRes, {
  //       pending: 'Uploading image',
  //       success: 'Image uploaded',
  //       error: 'Image upload error',
  //     });

  //     //extract image from the respoinse that came from Pinata so we can display:
  //     const data = res.data as PinataRes;
  //     setnftMetaData({
  //       ...nftMetaData,
  //       image: `${process.env.NEXT_PUBLIC_PINATA_DOMAIN}/ipfs/${data.IpfsHash}`,
  //     });
  //   } catch (err: any) {
  //     console.error(err.message);
  //   }
  // };

  const handleChange = (
    event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = event.target;
    setnftMetaData({ ...nftMetaData, [name]: value });
  };

  const uploadMetaData = async () => {
    try {
      const { signedData, account } = await getSignedData();

      const promiseMetadataRes = axios.post('/api/verify', {
        address: account,
        signature: signedData,
        nft: nftMetaData, //data from the form
      });

      //loading notification:
      const res = await toast.promise(promiseMetadataRes, {
        pending: 'Uploading metadata',
        success: 'Metadata uploaded',
        error: 'Metadata upload error',
      });

      const data = res.data as PinataRes;
      setNftURI(
        `${process.env.NEXT_PUBLIC_PINATA_DOMAIN}/ipfs/${data.IpfsHash}`
      );
      setHasURI(true);
    } catch (err: any) {
      console.error(err.message);
    }
  };

  const createNft = async () => {
    try {
      const nftRes = await axios.get(nftURI);
      const content = nftRes.data;

      //check if JSON has valid key names
      Object.keys(content).forEach((key) => {
        if (!ALLOWED_FIELDS.includes(key)) {
          throw new Error('Invalid JSON structure');
        }
      });

      //create NFT
      const transaction = await contract?.mintToken(
        nftURI, //link to JSON file
        ethers.utils.parseEther(price),
        {
          value: ethers.utils.parseEther((0.025).toString()), //listing fee
        }
      );

      //loading notification:
      await toast.promise(transaction!.wait(), {
        pending: 'Creating NFT',
        success: 'NFT successfully minted!',
        error: 'NFT Minting Error',
      });

      //redirect
      router.push('/market');
    } catch (err: any) {
      console.error(err.message);
    }
  };

  if (!network.isConnectedToNetwork) {
    return (
      <BaseLayout>
        <div className='rounded-md bg-yellow-50 p-4 mt-10'>
          <div className='flex'>
            <div className='flex-shrink-0'>
              <ExclamationCircleIcon
                className='h-5 w-5 text-red-600'
                aria-hidden='true'
              />
            </div>
            <div className='ml-3'>
              <h3 className='text-sm font-medium text-red-800'>
                Attention needed
              </h3>
              <div className='mt-2 text-sm text-yellow-700'>
                <p>
                  {network.isLoading
                    ? 'Loading...'
                    : `Please onnect to ${network.targetNetwork}.`}
                </p>
              </div>
            </div>
          </div>
        </div>
      </BaseLayout>
    );
  }

  return (
    <BaseLayout>
      <div className='max-w-lg mx-auto'>
        <h2 className='my-8 text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-yellow-300 sm:text-4xl text-center'>
          List NFT to Market
        </h2>
        {hasURI ? (
          <div className='max-w-lg'>
            <form>
              <div className='shadow sm:rounded-md sm:overflow-hidden'>
                <div className='px-4 py-5 bg-white space-y-6 sm:p-6'>
                  <LoadNft3dObject url={nftMetaData.image} />
                  <div>
                    <div className='font-bold'>Your metadata: </div>
                    <div>
                      <Link href={nftURI}>
                        <a className='underline text-pink-600'>{nftURI}</a>
                      </Link>
                    </div>
                    <label htmlFor='price' className='font-bold'>
                      Price (CET)
                    </label>
                    <div className='mt-1 flex rounded-md shadow-sm'>
                      <input
                        onChange={(evt) => setPrice(evt.target.value)}
                        value={price}
                        type='number'
                        name='price'
                        id='price'
                        className='focus:ring-pink-500 focus:border-pink-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300'
                        placeholder='ex) 10'
                      />
                    </div>
                  </div>
                </div>
                <div className='px-4 py-3 bg-gray-50 text-right sm:px-6'>
                  <button
                    onClick={createNft}
                    type='button'
                    className='inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-amber-500 hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-600'
                  >
                    Mint NFT
                  </button>
                </div>
              </div>
            </form>
          </div>
        ) : (
          <div className='max-w-lg'>
            <form>
              <div className='shadow sm:rounded-md sm:overflow-hidden'>
                <div className='px-4 py-5 bg-white space-y-6 sm:p-6'>
                  <div>
                    <label
                      htmlFor='name'
                      className='block text-sm font-medium text-gray-700'
                    >
                      Name
                    </label>
                    <div className='mt-1 flex rounded-md shadow-sm'>
                      <input
                        value={nftMetaData.name}
                        onChange={handleChange}
                        type='text'
                        name='name'
                        id='name'
                        className='focus:ring-pink-500 focus:border-pink-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300'
                        placeholder='Your NFT Name'
                      />
                    </div>
                  </div>
                  <div>
                    <label
                      htmlFor='description'
                      className='block text-sm font-medium text-gray-700'
                    >
                      Description
                    </label>
                    <div className='mt-1'>
                      <textarea
                        value={nftMetaData.description}
                        onChange={handleChange}
                        id='description'
                        name='description'
                        rows={3}
                        className='shadow-sm focus:ring-pink-500 focus:border-pink-500 mt-1 block w-full sm:text-sm border border-gray-300 rounded-md'
                        placeholder='Write some awesome texts about your NFT!'
                      />
                    </div>
                  </div>

                  <div>
                    <label className='block text-sm font-medium text-gray-700'>
                      NFT 3D Asset URL Link
                    </label>
                    <div className='mt-1 flex rounded-md shadow-sm'>
                      <input
                        onChange={handleChange}
                        type='text'
                        name='image'
                        id='image'
                        className='focus:ring-pink-500 focus:border-pink-500 flex-1 block w-full rounded-none rounded-r-md sm:text-sm border-gray-300'
                        placeholder='ex) http://link.com/asset.glb'
                      />
                    </div>
                    {nftMetaData.image ? (
                      <LoadNft3dObject url={nftMetaData.image} />
                    ) : (
                      <></>
                    )}
                  </div>
                </div>
                <div className='px-4 py-3 bg-gray-50 text-right sm:px-6'>
                  <button
                    onClick={uploadMetaData}
                    type='button'
                    className='inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-amber-500 hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-600'
                  >
                    Upload
                  </button>
                </div>
              </div>
            </form>
          </div>
        )}
      </div>
    </BaseLayout>
  );
};

export default NftCreate;
